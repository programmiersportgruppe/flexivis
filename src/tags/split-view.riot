<split-view>
  <content-frame if={ isLeaf } view={ view } />
  <template if={ !isLeaf } each={ (inner, idx) in (view && view.views) } key={ idx }>
    <div if={ idx !== 0 } class="separator" onmousedown={ resize(idx) } style="{ isVertical ? "width" : "height" }: 1px; cursor: { isVertical ? "ew" : "ns" }-resize;" />
    <div class="view-frame" style="{ isVertical ? "width" : "height" }: calc({ inner.size }% - { idx === 0 ? 0 : 1 }px)">
      <split-view view-definition={ inner.view } />
    </div>
  </template>

  <script>
    export default {
      onBeforeMount() {
        this.view = this.props.viewDefinition;
        this.isLeaf = this.view.type !== undefined;
        this.isVertical = this.view.sep === "/";
        if (!this.isLeaf) {
          this.view.views.forEach(inner => inner.originalSize = inner.size);
        }
      },
      resize(idx) {
        const screenSize = () => this.isVertical ? window.innerWidth : window.innerHeight;
        const eventLocation = e => this.isVertical ? e.clientX : e.clientY;
        return e => {
          // The minimum resizing limit (percentage) that a frame can have. This prevents resizing to
          // 0, because once you have a right/bottom frame with that size, it is almost impossible to
          // put the cursor on top of that instead of the browser window limit.
          const resizingLimit = 0.5;

          // These frames won't change at all.
          const start = this.view.views.slice(0, idx - 1)
          // This frame can be reduced down to `resizingLimit` and expanded up to `size(start) - resizingLimit`.
          const before = this.view.views[idx - 1];
          // These frames will be resized proportionally using what is left.
          const after = this.view.views.slice(idx);

          const startPercentage = start.reduce((t, v) => t + v.size, 0);
          const initialAfterSize = after.reduce((t, v) => t + v.size, 0) || after.size;
          const afterScaleFactors = after.map(v => v.size / initialAfterSize);

          // This is a workaround to allow the events to be fired even when hovering an iframe.
          // We add an invisible div over the whole page, that will make sure that all events are
          // fired for `document`.
          const invisibleDiv = document.createElement("div");
          invisibleDiv.classList.add("invisible-div");
          invisibleDiv.style.margin = 0;
          invisibleDiv.style.padding = 0;
          invisibleDiv.style.height = "100%";
          invisibleDiv.style.width = "100%";
          invisibleDiv.style.top = 0;
          invisibleDiv.style.left = 0;
          invisibleDiv.style.position = "absolute";
          invisibleDiv.style.cursor = e.target.style.cursor;

          e.target.classList.add("resizing");

          const move = e => {
            const newSize = 100 * (eventLocation(e) / screenSize()) - startPercentage;
            const adjustedSize = Math.min(Math.max(newSize, resizingLimit), 100 - startPercentage - resizingLimit);
            before.size = adjustedSize;

            const remainingSize = 100 - startPercentage - adjustedSize;
            after.forEach((v, i) => v.size = remainingSize * afterScaleFactors[i]);

            this.update();
            return false;
          };

          const stop = () => {
            document.body.removeChild(invisibleDiv);
            document.removeEventListener("mousemove", move);
            document.removeEventListener("mouseup", stop);
            e.target.classList.remove("resizing");
            window.dispatchEvent(new Event("resize"));
            this.update();
          }

          document.body.appendChild(invisibleDiv);
          document.addEventListener("mousemove", move);
          document.addEventListener("mouseup", stop);
        };
      },
    }
  </script>
</split-view>

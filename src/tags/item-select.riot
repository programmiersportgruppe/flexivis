<item-select>
  <div class="select-box">
    <select onchange={ onItemSelected }>
      <option each={ item in props.items } value={ item.id } key={ item.id } selected={ item.id === state.selectedId }>{ item.label || item.id }</option>
    </select>
    <input class="select-input { state.selectClass }" type="text" value={ state.inputId } onkeyup={ onIdInput } onpaste={ onIdInput }/>
    <button class="select-btn" onclick={ onGoClick }>Select</button>
  </div>

  <div class="app" />

  <!-- TODO: add modal support -->

  <script>
    import * as riot from "riot";

    export default {
      onIdInput(event) {
        const inputId = event.target.value;
        this.update({
          inputId,
          selectClass: inputId !== this.state.selectedId ? "select-input-changed" : undefined,
        });
        if (event.key === "Enter") {
          this.onGoClick();
        }
      },
      onGoClick() {
        const item = this.props.items.find(item => item.id === this.state.inputId);
        if (item) {
          this.setItem(item);
        } else {
          this.update({ selectClass: "select-input-invalid" });
        }
      },
      onItemSelected(event) {
        this.setItem(this.props.items[event.target.selectedIndex]);
      },
      setItem(item) {
        this.update({
          inputId: item.id,
          selectedId: item.id,
          selectClass: undefined,
        });

        const queryString = Object.entries(item)
          .reduce((q, [key, value]) => q.replace(`\${${key}}`, value), this.baseQuery);

        riot.unmount(this.appElement, true);
        riot.mount(this.appElement, { queryString }, "app");
      },
      onBeforeMount() {
        this.baseQuery = "?" + Object.entries(this.props.parameters).map(([key, value]) => `${key}=${value}`).join("&");
      },
      onMounted() {
        this.appElement = this.root.getElementsByClassName("app")[0];
        if (this.props.items.length !== 0) {
          this.setItem(this.props.items[0]);
        }
      },
    }
  </script>
</item-select>

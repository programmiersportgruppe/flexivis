general:
  berlin-walk:
    query: "layout=(explanation30-map)/source&explanation=md:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.md&map=map:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.json&source=json:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.json"
  illegal-layout:
    query: "layout=a/"
  missing-view:
    query: "layout=a/b&a=text-inline:This is fine"
  misspelled-view:
    query: "layout=a/b&a=text-inline:This is fine&b=marmeid"
  nonsense-view:
    query: "layout=a/b&a=text-inline:This is fine&b=nonsense"
  view-error-duplicate-map-layer:
    query: "layout=a/b&a=text-inline:This is fine&b=map:http://example.com/nonsense.json;http://example.com/nonsense.json"

handlers:
  frame:
    prefixes: [http, https, file]
    title: Regular Content
    description: HTTP/S URLs can be loaded and displayed in IFrames.
    examples:
      - query: "layout=a/b&a=https://wikipedia.org&b=https://example.com"
      - intro:
          If your browser environment permits it (e.g. if you build Flexivis locally and open it from a `file:` URL),
          you can also load content from `file:` URLs.
          This can be useful to visualise build outputs, for example.
        query: "layout=a/b&a=file://results.html&b=file://generated-image.png"
        screenshot: false

  markdown:
    prefixes: [md, md-inline]
    title: Markdown
    description: Render [Markdown](https://en.wikipedia.org/wiki/Markdown) content.
    examples:
      - query: "layout=a/b&a=md:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/markdown.md&b=md-inline:This pane contains **inline** Markdown content taken _from the URL_."

  json:
    prefixes: [json, json-inline]
    title: JSON
    description: Render JSON in an interactive viewer.
    examples:
      - query: 'layout=a/b&a=json:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/package-lock.json&b=json-inline:{"name": "inline JSON example", "id": 42, "values": ["foo", "baz", "bar"]}'

  text:
    prefixes: [text, text-inline]
    title: Text
    description: Display plain text. This can be used to display the source of a visualisation alongside the visualisation itself.
    examples:
      - query: "layout=(a-b)/c&a=text:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/plaintext.txt&b=text-inline:This is just _plain_ inline text from the URL&c=text:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/README.md"

  map:
    prefixes: [map]
    title: Map
    description: |
      Renders GeoJSON on an interactive map.
      The view allows the following configurations:

      - `center`: the latitude/longitude to center the map, e.g. `52.554101,13.463528`.
      - `zoomLevel`: the zoom level of the map.
      - `layer`: the layer type.

      The resources can also be configured:

      - `hidden`: initially hide this resource.
      - `id`: the label to be used by this resource:

      Here is an example on how to use these configurations:

      ```
      (center=52.554101,13.463528;zoomLevel=16;layer=osm)map:(id=walk;hidden)https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.json
      ```
    examples:
      # TODO after fixing markdown display, use `md` instead of `text` to show JSON source
      - query: "layout=a/b&a=map:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.json&b=text:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/berlin-walk.json"
      # TODO - 'map-inline:{"type": "Feature", "geometry": {"type": "Point", "coordinates": [6.140556, 46.226667]}, "properties": {"wikipedia": "https://en.wikipedia.org/wiki/Palace_of_Nations"}}'

  mermaid:
    prefixes: [mermaid, mermaid-inline]
    title: Mermaid Diagrams
    description: Renders [mermaid](https://mermaid-js.github.io/mermaid/) diagrams.
    examples:
      - query: 'layout=(a-b)/c&a=mermaid:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/mermaid.mmd&b=text:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/mermaid.mmd&c=mermaid-inline:graph TB; p[mermaid-inline prefix] --> URL; s[Mermaid source] --> URL -->%7CFlexivis%7C r[Rendered Diagram]'

  vega:
    prefixes: [vega, vega-inline]
    title: Vega Graphs
    description: Renders [Vega](https://vega.github.io/vega/) and [Vega-Lite](https://vega.github.io/vega-lite/) graphs.
    examples:
      # TODO after fixing markdown display, use `md` instead of `text` to show JSON source
      - query: "layout=(a-c30)/b&a=vega:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/cloc.json&b=text:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/cloc.json&c=text:https://raw.githubusercontent.com/programmiersportgruppe/flexivis/master/docs/samples/cloc.csv"
      - intro: You can specify the graph by putting JSON in the URL. The JSON can then load values by URL (like the JSON shown in the previous example), or you can embed the values in the JSON.
        viewport: { width: 400, height: 400 }
        query: 'url=vega-inline:{"data": {"values": [{"factor": "awesomeness", "score": 10}, {"factor": "weirdness", "score": 3}, {"factor": "color", "score": 7}]}, "mark": "bar", "encoding": {"x": {"field": "factor", "type": "nominal"}, "y": {"field": "score", "type": "quantitative"}, "color": {"field": "factor", "type": "nominal"}}, "height": "container", "width": 100}'

  # TODO: Deal with README, which isn't documented here. Arguably it shouldn't be a named view handler.
